{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Card/Card.js","App.js","registerServiceWorker.js","index.js"],"names":["Jumbotron","props","className","score","highScore","Card","href","onClick","randomCards","updateScore","id","style","height","width","marginBottom","alt","name","src","image","App","state","cards","clickedCards","includes","alert","setState","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","randomize","this","map","cardRender","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a0e9c2db.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Jumbotron.css';\r\n\r\nconst Jumbotron = (props) => (\r\n<div className=\"jumbotron\">\r\n  <h1> React Memory Game!</h1>\r\n  <p>Click on an image to earn points, but be careful to not click on the same image twice. if you do you will reset your game</p>\r\n  <p>Score: {props.score} <span> High Score: {props.highScore} </span></p>\r\n</div>\r\n)\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './Card.css';\r\n\r\nconst onClick = (props) => {\r\n\tprops.randomCards();\r\n\tprops.updateScore(props.id);\r\n}\r\n\r\nconst Card = (props) => (\r\n    <div>\r\n      <a href=\"#\" className=\"thumbnail\" onClick={() => onClick(props)}>\r\n        <img style={{height: 150, width: 150, marginBottom: 10}}alt = {props.name} className=\"image\" src={props.image} />\r\n      </a>\r\n    \r\n </div>\r\n)\r\n\r\nexport default Card","import React, { Component } from 'react';\nimport Jumbotron from './components/Jumbotron/Jumbotron.js';\nimport Card from './components/Card/Card.js';\nimport cards from './cards.json';\nimport './index.css';\n\nclass App extends Component {\n\n  state = {\n    cards: cards,\n    score: 0,\n    highScore: 0,\n    clickedCards: [],\n  }\n\n  //Function to update the score when a card is clicked  \n  updateScore = (id) => {\n\n    //If statement which determines what happens if they picked an image they already picked\n    if (this.state.clickedCards.includes(id)) {\n      alert('You picked that character already!');\n      this.setState({ score: 0, clickedCards: [] })\n    }\n\n    //Else statement that determines what happens if they picked an image they have not picked before\n    else {\n      this.setState({ clickedCards: [...this.state.clickedCards, id] })\n      this.setState({ score: this.state.score + 1 })\n      //Nested if statement that determines what happens if user gets a high score\n      if (this.state.score >= this.state.highScore) {\n        this.setState({ highScore: this.state.score + 1 })\n      }\n      //Nested if statement if user wins the game  \n      if (this.state.score === 11) {\n        this.setState({ score: 0, highScore: 12, clickedCards: [], cards: cards })\n        alert('You won!');\n      }\n    }\n  }\n\n  // Fisher-Yates Shuffle to randomize layout of cards\n  //https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  randomCards = (array) => {\n    let currentIndex = array.length;\n    while (0 !== currentIndex) {\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    this.setState({ randomize: cards });\n  }\n\n  //Render the entire app\n  render() {\n    return (\n      <div>\n        <Jumbotron score={this.state.score} highScore={this.state.highScore} />\n        <div className=\"container d-flex\">\n          <div className=\"row\">\n          {this.state.cards.map(cardRender => (\n            // <div className='col-md-3' id={cardRender.id}>\n              <Card \n                className=\"col-md-3\"\n                id={cardRender.id}\n                key={cardRender.id}\n                image={cardRender.image}\n                randomCards={() => { this.randomCards(this.state.cards) }}\n                updateScore={() => { this.updateScore(cardRender.id) }} />\n            // </div>\n          ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// // This optional code is used to register a service worker.\n// // register() is not called by default.\n\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on subsequent visits to a page, after all the\n// // existing tabs open on the page have been closed, since previously cached\n// // resources are updated in the background.\n\n// // To learn more about the benefits of this model and instructions on how to\n// // opt-in, read https://bit.ly/CRA-PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.1/8 is considered localhost for IPv4.\n//     window.location.hostname.match(\n//       /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// );\n\n// export function register(config) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://bit.ly/CRA-PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then(registration => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n//               );\n\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch(error => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl)\n//     .then(response => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then(registration => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log(\n//         'No internet connection found. App is running in offline mode.'\n//       );\n//     });\n// }\n\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready.then(registration => {\n//       registration.unregister();\n//     });\n//   }\n// }\n\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}